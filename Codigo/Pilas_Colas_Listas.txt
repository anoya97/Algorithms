#ifndef TAMANO_MAXIMO_PILA
#define TAMANO_MAXIMO_PILA 10 
#endif 
typedef int tipo_elemento;
typedef struct {
   int cima; 
   tipo_elemento vector[TAMANO_MAXIMO_PILA]; 
}  pila; 
void crear_pila(pila *); 
int pila_vacia(pila); 
void apilar(tipo_elemento, pila *); 
tipo_elemento cima(pila); 
void desapilar(pila *); 
/* ERRORES: cima o desapilar sobre la pila vacia apilar sobre la pila llena */
 
#include <stdlib.h> 
#include <stdio.h> 
#include "pilas.h" 
void crear_pila(pila *p) { 
   p->cima = -1;
}
int pila_vacia(pila p) { 
   return (p.cima == -1);
}
void apilar(tipo_elemento x, pila *p) { 
   if (++p->cima == TAMANO_MAXIMO_PILA) { 
      printf("error: pila llena\n"); exit(EXIT_FAILURE); 
   } 
   p->vector[p->cima] = x; 
}

tipo_elemento cima(pila p) { 
   if (pila_vacia(p)) { 
      printf("error: pila vacia\n"); 
      exit(EXIT_FAILURE); 
   }
   return p.vector[p.cima]; 
} 
void desapilar(pila *p) { 
   if (pila_vacia(*p)) { 
      printf("error: pila vacia\n"); 
      exit(EXIT_FAILURE);
   } 
   p->cima--;
}

(*****************************************************************************************)

#ifndef TAMANO_MAXIMO_COLA 
#define TAMANO_MAXIMO_COLA 5 
#endif typedef int tipo_elemento;
typedef struct { 
   int cabeza, final, tamano; 
   tipo_elemento vector[TAMANO_MAXIMO_COLA];
} cola;
void crear_cola(cola *); 
int cola_vacia(cola); 
void insertar(tipo_elemento, cola *); 
tipo_elemento quitar_primero(cola *); 
tipo_elemento primero(cola); 
/* ERRORES: quitar_primero o primero sobre una cola vacia insertar en una cola llena */ 

#include <stdlib.h> 
#include <stdio.h> 
#include "colas.h" 
void crear_cola(cola *c) {
   c->tamano = 0; 
   c->cabeza = 0; 
   c->final = -1; 
}
int cola_vacia(cola c) { 
   return (c.tamano == 0); 
} 
void incrementar(int *x) { /* privado */ 
   if (++(*x) == TAMANO_MAXIMO_COLA)
      *x = 0; 
}

void insertar(tipo_elemento x, cola *c) { 
   if (c->tamano == TAMANO_MAXIMO_COLA) {
      printf("error: cola llena: %d\n", c->tamano); 
      exit(EXIT_FAILURE);
   }
   c->tamano++;
   incrementar(&(c->final)); 
   c->vector[c->final] = x; 
} 
tipo_elemento primero(cola c) {
   if (cola_vacia(c)) { 
      printf("error: cola vacia\n"); exit(EXIT_FAILURE); 
   }
   return(c.vector[c.cabeza]); 
}

tipo_elemento quitar_primero(cola *c) {
   tipo_elemento x;
   if (cola_vacia(*c)) {
      printf("error: cola vacia\n"); 
      exit(EXIT_FAILURE); 
   }
   c->tamano--; 
   x = c->vector[c->cabeza]; 
   incrementar(&(c->cabeza)); 
   return x; 
}

(*****************************************************************************************)

struct nodo { 
   void *elem; /* ’void *’ es un apuntador ’generico’ */
   struct nodo *sig;
}; 
typedef struct nodo *posicion;
typedef struct nodo *lista;
lista crearlista();
int eslistavacia(lista l);
void insertar(void *e, posicion p); 
   /*inserta e tras el nodo apuntado por p*/ 
posicion buscar(lista l, void *e,
                int (*comp)(const void *x, const void *y)); 
   /*la funcion comp devuelve un numero mayor, igual o menor 
        que cero, segun x sea mayor, igual, o menor que y*/

void borrar(lista l, void *e,
            int (*comp)(const void *x, const void *y));
posicion primero(lista l); 
posicion siguiente(posicion p); 
int esfindelista(posicion p); 
void *elemento(posicion p);

/* Para recorrer los elementos de la lista:

for(p=primero(l); !esfindelista(p); p=siguiente(p)) { 
   //hacer algo con elemento(p) 
} 
*/

#include <stdlib.h> 
#include <stdio.h> 
#include "listas.h" 
static struct nodo *crearnodo(){ 
   struct nodo *tmp = malloc(sizeof(struct nodo)); 
   if (tmp == NULL) { 
      printf("memoria agotada\n"); exit(EXIT_FAILURE); 
   }
   return tmp;
} 
lista crearlista(){ 
   struct nodo *l = crearnodo(); 
   l->sig = NULL;
   return l; 
}

int eslistavacia(lista l){ 
   return (l->sig == NULL); 
}
void insertar(void *x, posicion p) { 
   struct nodo *tmp = crearnodo();
   tmp->elem = x; tmp->sig = p->sig; 
   p->sig = tmp; 
}
posicion buscar(lista l, void *e,
                int (*comp)(const void *x, const void *y)){
   struct nodo *p = l->sig; 
   while (p != NULL && 0!=(*comp)(p->elem, e)) 
      p = p->sig;
   return p; 
}

static posicion buscarant(lista l, void *x,
                          int (*comp)(const void *, const void *)) {
   struct nodo *p = l; 
   while (p->sig != NULL && 0!=(*comp)(p->sig->elem, x))
      p = p->sig;
   return p; 
}

static int esultimoelemento(struct nodo *p) {
   return (p->sig == NULL); 
}

void borrar(lista l, void *x,
            int (*comp)(const void *, const void *)) {
   struct nodo *tmp, *p = buscarant(l, x, comp); 
   if (!esultimoelemento(p)) { 
      tmp = p->sig; 
      p->sig = tmp->sig;
      free(tmp); 
   }
}

posicion primero(lista l) { return l->sig; } 
posicion siguiente(posicion p) { return p->sig; } 
int esfindelista(posicion p) { return (p==NULL); } 
void *elemento(posicion p) { return p->elem; }
