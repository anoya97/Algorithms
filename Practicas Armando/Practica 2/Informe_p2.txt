El ordenador que se usó para la medición de tiempos es un portátil con:
CPU: Intel(R) Core(TM) i7-8750H @ 2.20GHz 2.21GHz
Memoria Ram: 16GB DDR4
Disco duro HDD (1TB): 100GB (es una partición)
Sistema Operativo: Ubuntu 14.05.5 (64-bit)

Nombre: Jose Joaquin Baz Pena (jose.baz1), Xan Limia García (xan.limia) Armando Martínez Noya (a.mnoya).
Grupo de prácticas: 4.3.

En este trabajo buscamos verificar empiricamente la complejidad computacional de dos algoritmos de ordenacion. 
Ordenacion por insercion y Ordenacion Shell.
Para cada uno de los algoritmos utilizamos 3 tipos de vectores: Aleatorio, ascendente y descendente.
Siendo teoricamente el vector ascendente el mejor caso y el descendente el peor para ambos algoritmos.
El tamaño de los vectores sigue una progresion geometrica de razon 2 desde 500 hasta 512000,
en algunos casos detenemos la ejecucion antes dado que el tiempo que tarda en ordenar esos vectores es superior a 1seg.



Además tambien mide los tiempos de ejecución de los distintas algoritmos, estos tiempos están medidos en microsegundos(µs).

Para las ejecuciones cuyo tiempo no supere el umbral de confianza de 500 microsegundos, 
se repetirá el algoritmo k veces y se hallará la media del tiempo de ejecución.
Los tiempos para los que se ha calculado automáticamente esta media estarán marcados con (*).

Ordenación shell con inicializacion aleatoria
          n           t(n)    t(n)/n^1.10    t(n)/n^1.20    t(n)/n^1.30
(*)     500         45.474     0.04885355     0.02624213     0.01409621
(*)    1000        104.949     0.05259909     0.02636199     0.01321230
(*)    2000        236.724     0.05534893     0.02588249     0.01210329
       4000        547.000     0.05966522     0.02603246     0.01135820
       8000       1291.000     0.06569422     0.02674349     0.01088703
      16000       2766.000     0.06566291     0.02494066     0.00947319
      32000       6739.000     0.07463291     0.02644937     0.00937348
      64000      15298.000     0.07903811     0.02613476     0.00864173
     128000      34109.000     0.08221251     0.02536394     0.00782521
     256000      81285.000     0.09140003     0.02631008     0.00757354
     512000     189833.000     0.09958057     0.02674530     0.00718325

k=1000.
Cota Subestimada: n^1.1
Cota Ajustada: n^1.2
CotaSobrestimada: n^1.3

Empleando una cota ligeramente subestimada, la secuencia
de t(n)/n^1.1 tienda a infinito cuando n tiende a infinito.
Y con una cota ligeramente sobreestimada, la relación de t(n)/n^1.30
tienda a cero cuando n tiende a infinito.
La cota ajustada tiende al valor 0.026 


Ordenación shell con inicializacion ascendente
          n           t(n)    t(n)/n^0.95    t(n)/n^1.12    t(n)/n^1.20
(*)     500         12.822     0.03498922     0.01216492     0.00739932
(*)    1000         29.150     0.04117547     0.01272444     0.00732215
(*)    2000         65.842     0.04814205     0.01322359     0.00719891
(*)    4000        143.631     0.05436148     0.01327214     0.00683559
(*)    8000        310.071     0.06074712     0.01318258     0.00642322
      16000        713.000     0.07230621     0.01394682     0.00642903
      32000       1505.000     0.07900309     0.01354467     0.00590686
      64000       3167.000     0.08605521     0.01311374     0.00541043
     128000       7260.000     0.10211445     0.01383125     0.00539864
     256000      14600.000     0.10629797     0.01279747     0.00472568
     512000      31317.000     0.11802493     0.01262984     0.00441221

k=1000.
Cota Subestimada: n^0.95
Cota Ajustada: n^1.12
CotaSobrestimada: n^1.20

Empleando una cota ligeramente subestimada, la secuencia
de t(n)/n^0.95 tienda a infinito cuando n tiende a infinito.
Y con una cota ligeramente sobreestimada, la relación de t(n)/n^1.20
tienda a cero cuando n tiende a infinito.
La cota ajustada tiende al valor 0.013 



Ordenación shell con inicializacion descendente
          n           t(n)    t(n)/n^1.00    t(n)/n^1.12    t(n)/n^1.20
(*)     500         18.628     0.03725600     0.01767339     0.01074984
(*)    1000         42.512     0.04251200     0.01855716     0.01067853
(*)    2000         91.241     0.04562050     0.01832468     0.00997594
(*)    4000        199.623     0.04990575     0.01844605     0.00950032
(*)    8000        441.447     0.05518087     0.01876799     0.00914472
      16000        996.000     0.06225000     0.01948251     0.00898080
      32000       2075.000     0.06484375     0.01867455     0.00814400
      64000       4462.000     0.06971875     0.01847600     0.00762278
     128000       9781.000     0.07641406     0.01863408     0.00727329
     256000      20775.000     0.08115234     0.01821010     0.00672439
     512000      44314.000     0.08655078     0.01787140     0.00624334

k=1000.
Cota Subestimada: n^1
Cota Ajustada: n^1.12
CotaSobrestimada: n^1.20

Empleando una cota ligeramente subestimada, la secuencia
de t(n)/n^1 tienda a infinito cuando n tiende a infinito.
Y con una cota ligeramente sobreestimada, la relación de t(n)/n^1.20
tienda a cero cuando n tiende a infinito.
La cota ajustada tiende al valor 0.018 



Ordenación por inserción con inicializacion aleatoria
          n           t(n)    t(n)/n^1.80    t(n)/n^2.00    t(n)/n^2.20
(*)     500        139.510     0.00193401     0.00055804     0.00016102
       1000        574.000     0.00228514     0.00057400     0.00014418
       2000       2210.000     0.00252661     0.00055250     0.00012082
       4000       8720.000     0.00286292     0.00054500     0.00010375
       8000      34869.000     0.00328759     0.00054483     0.00009029
      16000     138540.000     0.00375111     0.00054117     0.00007807
      32000     552871.000     0.00429887     0.00053991     0.00006781
      64000    2204941.000     0.00492349     0.00053832     0.00005886

k=1000.
Cota Subestimada: n^1.80
Cota Ajustada: n^2
CotaSobrestimada: n^2.2

Empleando una cota ligeramente subestimada, la secuencia
de t(n)/n^1.8 tienda a infinito cuando n tiende a infinito.
Y con una cota ligeramente sobreestimada, la relación de t(n)/n^2.2
tienda a cero cuando n tiende a infinito.
La cota ajustada tiende al valor 0.00055 


Ordenación por inserción con inicializacion ascendente
          n           t(n)    t(n)/n^0.80    t(n)/n^1.00    t(n)/n^1.20
(*)     500          1.470     0.01018923     0.00294000     0.00084831
(*)    1000          2.859     0.01138188     0.00285900     0.00071815
(*)    2000          6.192     0.01415816     0.00309600     0.00067701
(*)    4000         11.660     0.01531266     0.00291500     0.00055491
(*)    8000         23.526     0.01774500     0.00294075     0.00048735
(*)   16000         46.844     0.02029355     0.00292775     0.00042239
(*)   32000         93.408     0.02324149     0.00291900     0.00036661
(*)   64000        189.134     0.02702873     0.00295522     0.00032311
(*)  128000        372.741     0.03059420     0.00291204     0.00027718
     256000        739.000     0.03483793     0.00288672     0.00023920
     512000       1478.000     0.04001828     0.00288672     0.00020823

k=1000.
Cota Subestimada: n^0.80
Cota Ajustada: n^1
CotaSobrestimada: n^1.2

Empleando una cota ligeramente subestimada, la secuencia
de t(n)/n^0.8 tienda a infinito cuando n tiende a infinito.
Y con una cota ligeramente sobreestimada, la relación de t(n)/n^1.2
tienda a cero cuando n tiende a infinito.
La cota ajustada tiende al valor 0.0029


Ordenación por inserción con inicializacion descendente
          n           t(n)    t(n)/n^1.80    t(n)/n^2.00    t(n)/n^2.20
(*)     500        270.880     0.00375518     0.00108352     0.00031264
       1000       1113.000     0.00443093     0.00111300     0.00027957
       2000       4316.000     0.00493432     0.00107900     0.00023595
       4000      17693.000     0.00580890     0.00110581     0.00021051
       8000      69877.000     0.00658829     0.00109183     0.00018094
      16000     278501.000     0.00754069     0.00108789     0.00015695
      32000    1101811.000     0.00856717     0.00107599     0.00013514

k=1000.
Cota Subestimada: n^1.80
Cota Ajustada: n^2
CotaSobrestimada: n^2.2

Empleando una cota ligeramente subestimada, la secuencia
de t(n)/n^1.8 tienda a infinito cuando n tiende a infinito.
Y con una cota ligeramente sobreestimada, la relación de t(n)/n^2.2
tienda a cero cuando n tiende a infinito.
La cota ajustada tiende al valor 0.00108

Notese que hemos elegido las mejores tablas de una secuencia de varias para evitar las anomalias.

CONCLUSION

En la ordenación por insercion hemos demostrado empiricamente su complejidad gracias a los resultados obteidos en las tablas.
En el mejor caso (ascendente) tiene una complejidad lineal O(n). Y en caso medio y peor caso una coplejidad cuadratica O(n^2). 
En las tablas podemos ver que el vector ascendente tarda mucho menos tiempo llegando a un tamaño de vector de 512000 sin detener la ejecucion.
En los demas casos se detiene antes debido a su poca eficiencia.
En cuanto al caso de la ordenacion shell hemos comprobado que es mas eficiente en general que insercion.
El caso menos eficiente de este algoritmo es el caso del vector aleatorio.




